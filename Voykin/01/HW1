#include <iostream>
#include <cmath>
#include "numbers.dat"
using namespace std;
int search_limit(int x)
{
    int left_limit = 0, right_limit = Size - 1;
    int cursor;
    while(1)
    {
        cursor = (left_limit + right_limit)/2;
        if (Data[cursor] != x)
        {
            if (Data[cursor] < x)
            {
                left_limit = cursor;
            }
            else
            {
                right_limit = cursor;
            }
        }
        else
        {
            while ((cursor > 0)&&(Data[cursor]==Data[cursor-1]))
            {
                cursor--;
            }
            return cursor;
        }
        if (right_limit - left_limit < 2)
        {
            if (Data[right_limit] == x)
            {
                return right_limit;
            }
            else
            {
                return -1;
            }
        }
    }
}
int it_simple(int x, int* praim)
{
    int sqrt_x = sqrt(x);
    if (x != 1)
    {
        for(int i = 0; praim[i] <= sqrt_x; i++)
        {
            if (x % praim[i] == 0)
            {
                return 0;
            }
        }
    }
    else
    {
        return 0;
    }
    return 1;
}
void search_prime_numbers(int left_limit, int stop,int *praim)
{
    int number_of_simple = 0;
    int i;
    for (i = left_limit; (i<Size)&&(Data[i]<=stop); i++)
    {
        number_of_simple += it_simple(Data[i], praim);
    }
    if (Data[i-1] == stop)
    {
        cout << number_of_simple << endl;
    }
    else
    {
        cout << 0 << endl;
    }
}

int main(int argc, char* argv[])
{
    int left_limit;
    int *praim = new int [66]{2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,
    137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317};
    if (argc == 1)
    {
        cout << 0 <<endl;
        return -1;
    }
    if (argc % 2 == 0)
    {
        return -1;
    }
    for (int i = 1; i < argc; i+=2)
    {
        left_limit = search_limit(atoi(argv[i]));
        if (left_limit != -1)
        {
            search_prime_numbers(left_limit, atoi(argv[i+1]), praim);
        }
        else
        {
            cout << 0 <<endl;
        }
    }
    delete []praim;
    return 0;
}
